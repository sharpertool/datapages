"""
Django settings for datapages project.

Generated by 'django-admin startproject' using Django 1.11.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import environ
import os

env = environ.Env()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = os.path.dirname(PROJECT_DIR)

DEBUG = env.bool('DJANGO_DEBUG', default=False)
SASS_PROCESSOR_ENABLED = DEBUG is True

# Make these unique, and don't share it with anybody.
SECRET_KEY = env.str('SECRET_KEY')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# Application definition

INSTALLED_APPS = [
    'blog',
    'datasheet',
    'home',
    'search',

    'wagtail.contrib.forms',
    'wagtail.contrib.redirects',
    'wagtail.embeds',
    'wagtail.sites',
    'wagtail.users',
    'wagtail.snippets',
    'wagtail.documents',
    'wagtail.images',
    'wagtail.search',
    'wagtail.admin',
    'wagtail.core',
    "wagtail.contrib.table_block",

    'modelcluster',
    'taggit',

    #'suit',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'storages',
    'pipeline',
    'sass_processor',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',

    'wagtail.core.middleware.SiteMiddleware',
    'wagtail.contrib.redirects.middleware.RedirectMiddleware',
]

ROOT_URLCONF = 'datapages.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(PROJECT_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'datapages.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

# DATABASE
DATABASES = {
    'default': env.db("DATABASE_URL", default='postgresql://datasheet_user:@localhost/datasheetai'),
}

DATABASES['default']['ATOMIC_REQUESTS'] = True

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Wagtail settings

WAGTAIL_SITE_NAME = env.str("WAGTAIL_SITE_NAME", default="datapages.io")

IFRAMELY_API_KEY = env.str('IFRAMELY_API_KEY', default=None)
WAGTAILEMBEDS_FINDERS = [
    {
        'class': 'wagtail.embeds.finders.oembed'
    },
]
if IFRAMELY_API_KEY:
    WAGTAILEMBEDS_FINDERS += [{
        'class': 'embed.finders.iframely',
        'key': IFRAMELY_API_KEY
    }]

# Base URL to use when referring to full URLs within the Wagtail admin backend -
# e.g. in notification emails. Don't include '/admin' or a trailing slash
BASE_URL = 'http://{0}'.format(WAGTAIL_SITE_NAME)

# Hosts/domain names that are valid for this site; required if DEBUG is False
# See https://docs.djangoproject.com/en/dev/ref/settings/#allowed-hosts
ALLOWED_HOSTS = env.list('DJANGO_ALLOWED_HOSTS', default=[WAGTAIL_SITE_NAME])

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'pipeline.finders.PipelineFinder',
    'sass_processor.finders.CssFinder',
]

STATICFILES_DIRS = []

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Django Storages
AWS_ACCESS_KEY_ID = env.str("AWS_ACCESS_KEY_ID", default=None)
AWS_SECRET_ACCESS_KEY = env.str("AWS_SECRET_ACCESS_KEY", default=None)
AWS_STORAGE_BUCKET_NAME = env.str("AWS_STORAGE_BUCKET_NAME", default=None)
AWS_S3_REGION_NAME = env.str("AWS_S3_REGION_NAME", default="us-west-2")
AWS_S3_OBJECT_PARAMETERS = env.dict("AWS_S3_OBJECT_PARAMETERS",
                                    default={
                                        'Expires': 'Thu, 31 Dec 2099 20:00:00 GMT',
                                        'CacheControl': 'max-age=86400'
                                    })
AWS_S3_CUSTOM_DOMAIN = env.str("AWS_S3_CUSTOM_DOMAIN",
                               default="{}.s3.amazonaws.com".format(AWS_STORAGE_BUCKET_NAME))

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

SASS_PROCESSOR_INCLUDE_DIRS = [
    os.path.join(BASE_DIR, 'datapages/static/sass'),
    os.path.join(BASE_DIR, 'datasheet/static/sass'),
]
SASS_PROCESSOR_ROOT = os.path.join(BASE_DIR, 'static')


PIPELINE = {
    'PIPELINE_ENABLED': DEBUG is False,  # Compress if not debugging
    'PIPELINE_COLLECTOR_ENABLED': True,  # Always collect assets
    'COMPILERS': [
        'pipeline.compilers.sass.SASSCompiler',
    ],
    'STYLESHEETS': {
        'datasheet': {
            'source_filenames': (
                'datasheet/static/sass/index.scss',
            ),
            'output_filename': 'css/datasheet.css',
            'extra_context': {
                'media': 'screen,projection'
            }
        }
    },
    'JAVASCRIPT': {
        'datasheet': {
            'source_filenames': (

            ),
            'output_filename': 'js/datasheet.js',
        },
        # 'stats': {
        #     'source_filenames': (
        #       'js/jquery.js',
        #       'js/d3.js',
        #       'js/collections/*.js',
        #       'js/application.js',
        #     ),
        #     'output_filename': 'js/stats.js',
        # }
    }
}

# Make the AWS Configuration optional, for local development
if (AWS_ACCESS_KEY_ID is None):
    print("Using Local Static and Media files")
else:
    print("Setting up to use S3 storage.")

    #STATICFILES_LOCATION = env.str("STATICFILES_LOCATION", default="staticfiles")
    #STATIC_ROOT = "staticfiles"
    #STATIC_URL = "http://{bucket}.s3.amazonaws.com/".format(bucket=AWS_STORAGE_BUCKET_NAME)

    MEDIAFILES_LOCATION = env.str("MEDIAFILES_LOCATION", default="mediafiles")
    MEDIA_ROOT = "mediafiles"
    MEDIA_URL = "{0}{1}/".format(STATIC_URL, MEDIA_ROOT)

    ADMIN_MEDIA_PREFIX = "{}admin/".format(STATIC_URL)

    DEFAULT_FILE_STORAGE = 'custom_storages.MediaStorage'
    #STATICFILES_STORAGE = 'custom_storages.StaticStorage'
    # How to manage pipelines AND S3 static file storage?
    #STATICFILES_STORAGE = 'pipeline.storage.PipelineCachedStorage'


    print("CDN Domain:{}".format(AWS_S3_CUSTOM_DOMAIN))