# Generated by Django 2.0.5 on 2018-05-23 02:33

import datasheet.blocks
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.contrib.table_block.blocks
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.documents.blocks
import wagtail.images.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0040_page_draft_title'),
        ('taggit', '0002_auto_20150616_2121'),
        ('wagtailimages', '0019_delete_filter'),
    ]

    operations = [
        migrations.CreateModel(
            name='IndexPage',
            fields=[
                ('intro', wagtail.core.fields.RichTextField(blank=True)),
                ('svglogo', models.FileField(blank=True, null=True, upload_to='')),
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='epcos_index', serialize=False, to='wagtailcore.Page')),
                ('logo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
            ],
            options={
                'verbose_name': 'Epcos Index Page',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='RelatedLinks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('name', models.CharField(max_length=255)),
                ('url', models.URLField()),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SheetPage',
            fields=[
                ('date', models.DateField(verbose_name='Post Date')),
                ('intro', models.CharField(blank=True, max_length=250)),
                ('part_number', models.CharField(blank=True, max_length=250)),
                ('body', wagtail.core.fields.RichTextField(blank=True)),
                ('subtitle', models.CharField(blank=True, max_length=250)),
                ('main_image', models.FileField(blank=True, null=True, upload_to='')),
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='epcos_sheet', serialize=False, to='wagtailcore.Page')),
                ('sheet_blocks', wagtail.core.fields.StreamField((('contact_data', wagtail.core.blocks.StructBlock((('title', wagtail.core.blocks.CharBlock()), ('bookmark', wagtail.core.blocks.CharBlock()), ('data', wagtail.contrib.table_block.blocks.TableBlock(table_options={'colHeaders': True, 'editor': 'handsontable', 'startCols': 2, 'startRows': 1}))))), ('dimension', wagtail.core.blocks.StructBlock((('title', wagtail.core.blocks.CharBlock()), ('bookmark', wagtail.core.blocks.CharBlock()), ('image', wagtail.images.blocks.ImageChooserBlock())))), ('revisions', wagtail.core.blocks.StructBlock((('title', wagtail.core.blocks.CharBlock()), ('bookmark', wagtail.core.blocks.CharBlock()), ('data', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock((('date', wagtail.core.blocks.DateBlock()), ('revisions', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock((('title', wagtail.core.blocks.CharBlock()), ('description', wagtail.core.blocks.CharBlock())), form_template='onsemi/blocks/editing/common/_struct_inline.html')))))))))), ('characteristics', wagtail.core.blocks.StructBlock((('title', wagtail.core.blocks.CharBlock(default='Characteristics')), ('subtitle', wagtail.core.blocks.CharBlock(require=False)), ('bookmark', wagtail.core.blocks.CharBlock(default='characteristics')), ('charts', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock((('title', wagtail.core.blocks.CharBlock(default='', required=False)), ('subtitle', wagtail.core.blocks.CharBlock(default='', require=False)), ('type', wagtail.core.blocks.ChoiceBlock(choices=[('bar', 'Bar'), ('column', 'Column'), ('line', 'Line'), ('spline', 'Spline')], require=False)), ('legend', wagtail.core.blocks.CharBlock(default='', required=False)), ('x_axis_config', datasheet.blocks.JSONTextBlock(default='{}', required=False)), ('y_axis_config', datasheet.blocks.JSONTextBlock(default='{}', required=False)), ('chart_values', datasheet.blocks.JSONTextBlock(default='[]', required=True))))))))), ('chart', wagtail.core.blocks.StructBlock((('title', wagtail.core.blocks.CharBlock()), ('bookmark', wagtail.core.blocks.CharBlock()), ('subtitle', wagtail.core.blocks.CharBlock(require=False)), ('type', wagtail.core.blocks.ChoiceBlock(choices=[('bar', 'Bar'), ('column', 'Column'), ('line', 'Line'), ('spline', 'Spline')], require=False)), ('legend', wagtail.core.blocks.CharBlock(required=False)), ('x_axis', wagtail.core.blocks.CharBlock(required=False)), ('y_axis', wagtail.core.blocks.CharBlock(required=False)), ('chart_values', datasheet.blocks.JSONTextBlock(required=False))))), ('video', wagtail.core.blocks.StructBlock((('title', wagtail.core.blocks.CharBlock(required=False)), ('bookmark', wagtail.core.blocks.CharBlock()), ('url', wagtail.core.blocks.TextBlock())))), ('embed_3d', wagtail.core.blocks.StructBlock((('title', wagtail.core.blocks.CharBlock()), ('bookmark', wagtail.core.blocks.CharBlock()), ('uuid', wagtail.core.blocks.CharBlock()), ('share_link', wagtail.core.blocks.TextBlock())))), ('grid', wagtail.core.blocks.StructBlock((('title', wagtail.core.blocks.CharBlock()), ('bookmark', wagtail.core.blocks.CharBlock()), ('subtitle', wagtail.core.blocks.CharBlock(required=False)), ('json_data', datasheet.blocks.JSONTextBlock(required=False))))), ('pdf', wagtail.core.blocks.StructBlock((('title', wagtail.core.blocks.CharBlock()), ('bookmark', wagtail.core.blocks.CharBlock()), ('file', wagtail.documents.blocks.DocumentChooserBlock()), ('height', wagtail.core.blocks.IntegerBlock(default=550)), ('view', wagtail.core.blocks.ChoiceBlock(choices=[('Fit', 'Fit'), ('FitH', 'FitH'), ('FitH,top', 'FitH,top'), ('FitV', 'FitV'), ('FitV,left', 'FitV,left'), ('FitB', 'FitB'), ('FitBH', 'FitBH'), ('FitBH,top', 'FitBH,top'), ('FitBV', 'FitBV'), ('FitBV,left', 'FitBV,left')], required=False))))), ('richtext', wagtail.core.blocks.StructBlock((('title', wagtail.core.blocks.CharBlock()), ('bookmark', wagtail.core.blocks.CharBlock()), ('text', wagtail.core.blocks.RichTextBlock()))))), blank=True)),
                ('attributes', wagtail.core.fields.StreamField((('features', wagtail.core.blocks.StructBlock((('features', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic']))),))), ('applications', wagtail.core.blocks.StructBlock((('applications', wagtail.core.blocks.ListBlock(wagtail.core.blocks.RichTextBlock(features=['bold', 'italic']))),)))), blank=True)),
                ('carousel', wagtail.core.fields.StreamField((('image', wagtail.core.blocks.StructBlock((('subtitle', wagtail.core.blocks.CharBlock()), ('image', wagtail.images.blocks.ImageChooserBlock()), ('alt', wagtail.core.blocks.CharBlock(required=False)), ('width', wagtail.core.blocks.IntegerBlock(required=False)), ('height', wagtail.core.blocks.IntegerBlock(required=False))))),), blank=True)),
            ],
            options={
                'verbose_name': 'Sheet Page',
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='SheetPageTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='epcos.SheetPage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='epcos_sheetpagetag_items', to='taggit.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='sheetpage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', related_name='epcos_sheetpage_tags', through='epcos.SheetPageTag', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='relatedlinks',
            name='page',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_links', to='epcos.SheetPage'),
        ),
    ]
